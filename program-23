#include <stdio.h>

#define MAX_BLOCKS 50

struct MemoryBlock {
    int size;
    int allocated; // 0 for free, 1 for allocated
};

struct MemoryBlock memory[MAX_BLOCKS];

void initializeMemory() {
    for (int i = 0; i < MAX_BLOCKS; ++i) {
        memory[i].size = 0;
        memory[i].allocated = 0;
    }
}

void displayMemory() {
    printf("\nMemory Block Status:\n");
    for (int i = 0; i < MAX_BLOCKS; ++i) {
        printf("%d\t", memory[i].size);
        if (memory[i].allocated) {
            printf("(Allocated)\n");
        } else {
            printf("(Free)\n");
        }
    }
}

void firstFit(int processSize) {
    int found = 0;

    for (int i = 0; i < MAX_BLOCKS; ++i) {
        if (!memory[i].allocated && memory[i].size >= processSize) {
            // Allocate memory
            memory[i].allocated = 1;
            found = 1;
            printf("\nMemory Allocated Successfully!\n");
            break;
        }
    }

    if (!found) {
        printf("\nInsufficient Memory to Allocate!\n");
    }
}

void deallocateMemory() {
    int blockIndex;
    printf("\nEnter the block index to deallocate: ");
    scanf("%d", &blockIndex);

    if (blockIndex >= 0 && blockIndex < MAX_BLOCKS && memory[blockIndex].allocated) {
        // Deallocate memory
        memory[blockIndex].allocated = 0;
        printf("\nMemory Deallocated Successfully!\n");
    } else {
        printf("\nInvalid Block Index or Block is not Allocated!\n");
    }
}

int main() {
    initializeMemory();

    int choice;
    do {
        printf("\nMemory Management Menu:\n");
        printf("1. Display Memory\n");
        printf("2. Allocate Memory (First Fit)\n");
        printf("3. Deallocate Memory\n");
        printf("0. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                displayMemory();
                break;
            case 2: {
                int processSize;
                printf("\nEnter the size of the process: ");
                scanf("%d", &processSize);
                firstFit(processSize);
                break;
            }
            case 3:
                deallocateMemory();
                break;
            case 0:
                printf("\nExiting...\n");
                break;
            default:
                printf("\nInvalid Choice! Please try again.\n");
        }

    } while (choice != 0);

    return 0;
}
